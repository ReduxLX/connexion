--- TopNavbar && BottomNavbar + Material UI ---
Problem: 
  Material UI components that displays pop ups will lock scrolling and set body tag overflow: auto
  as well as a padding-right to its contents (17px or equivalent). This auto-padding doesn't apply to 
  fixed components such as navbars which are fixed causing a shift to the right when opening mui popups.
Solution:
  Initialized a boolean variable, muiModalOpen, in App reducer which is toggled when any mui components
  pop-up is open/closed. Make both bottom/top navbars listen to the changes and set padding-right to 17px
  when any mui modal is opened. This ensures solves the shifting problem.

Problem:
  The issue is only occurring on desktop screens which means our solution above causes another problem
  on mobile devices as now we are moving the navbar left by 17px eventhough we don't need to.
Solution:
  Added function in utils to check if screen is mobile or desktop and modify both navbar logic to only
  apply the padding shift fix if: 1. Device is desktop && 2. muiModalOpen is true

--- Router's exclusive access ---
  To implement private routes, we create separate route components such as UnauthorizedRoute
  which is similar to a normal Route except with custom logic in it's render.
  For example, UnauthorizedRoute would redirect to "/" if user is signed in.

--- Global snackbar in router ---
  In order to streamline showing errors, success, info messages to the user, we decided to implement
  a global snackbar component in router.js which uses redux to toggle its visibility, variant and message.
  This means that virtually any component can now toggle a snackbar by dispatching the following App-action
  WITHOUT storing any local state hence avoiding unecessary re-renders.

    import * as actApp from ".../ac-App";
    dispatch(actapp.handleGlobal({
      isSnackbarVisible: true,
      snackbarVariant: "error" || "success" || "warning" || "info",
      snackbarMsg: "Insert message here"
    }))
  
  Currently the snackbar will not close when clicked away. If multiple snackbars are called then the current one
  will be replaced immediately. Snackbars persist when changing routes (this might be changed)

  UPDATE: Due to the many instances of "opening" snackbars throughot the app, we have decided to create a function in 
  utils to store the dispatch action. This means instead of dispatching an action we call this function instead:
  
  import { openSnackbar } from "../utils"
  openSnackbar("error", "Failed to login"); <-- Much shorter than the above dispatch code

  --- Searchbar dynamic height ---
  Problem: 
    The searchbar for mobile should rest just below the top navbar when expanded but the height of the top
    navbar varies based on whether the user is logged in and may potentially be different for screens of different sizes
  Solution:
    With useRef, track and store the height of the top navbar as local state and pass this height to the Search bar styled components.
    This may cause infinite looping given: store height -> re-render -> height change after re-render -> re-render
    As such, we might consider hard coding the height of the topnavbar instead (41 not logged in and 46 logged in + avatar)

  --- Handling Firebase Error Messages (fbError in utils.js) ---
  Problem: 
    Firebase errors are usually long and cannot be shown on a small snackbar
  Solution:
    We intercept and write shortened versions for each error encountered, any unhandled/empty error
    will be displayed as "An error has occurred" or a default value provided to the function.
    Additionally, unhandled errors will be printed to the console so they can be documented.
